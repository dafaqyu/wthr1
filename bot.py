import telebot
import requests
from telebot import types
import os
from dotenv import load_dotenv
load_dotenv()



bot = os.getenv('BOT_TOKEN')
API = os.getenv('API')
bot= telebot.TeleBot(bot)

user_city = {}

city = None

@bot.message_handler(commands=['start'])

def main(message):

    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –º–µ—Å—Ç–∞ –∂–∏—Ç–µ–ª—å—Å—Ç–≤–∞ —Ç—Ä–∞–Ω—Å–ª–∏—Ç–æ–º. \n\n–ù–∞–ø—Ä–∏–º–µ—Ä: Moscow, Abu dhabi –∏ —Ç.–¥.")
    
@bot.message_handler(commands=['help'])

def help(message):
    bot.send_message(message.chat.id, '‚ùó–ß—Ç–æ–±—ã –∏–º–µ—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã –Ω–∞–ø–∏—à–∏—Ç–µ –º–µ—Å—Ç–æ –≤–∞—à–µ–≥–æ –∂–∏—Ç–µ–ª—å—Å—Ç–≤–∞ —Ç—Ä–∞–Ω—Å–ª–∏—Ç–æ–º. –ù–∞–ø—Ä–∏–º–µ—Ä: Moscow, Saint petersburg, –∏ —Ç.–¥.\n\n‚ùó–í—ã –º–æ–∂–µ—Ç–µ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –∏–∑–º–µ–Ω–∏—Ç—å –≤–∞—à –≥–æ—Ä–æ–¥, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –±—É–¥—É—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å—Å—è –∫–æ–º–∞–Ω–¥—ã. –ü—Ä–æ—Å—Ç–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ.\n\n‚ùó–ë–æ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—É—é API –æ—Ç OpenWeatherMap.')

@bot.message_handler(commands=['next24'])

def osnova(message):
    user_id = message.from_user.id
    city = user_city.get(user_id)
    if city == None:
        bot.send_message(message.chat.id, '–û—à–∏–±–∫–∞.')
        return



    markup = types.InlineKeyboardMarkup(row_width=1)
    btn1= types.InlineKeyboardButton('–û–±–Ω–æ–≤–∏—Ç—å', callback_data=f'update_{user_id}')
    markup.add(btn1)

    weather_text = get_weather_data(city)
    if weather_text:
        bot.send_message(message.chat.id, weather_text, reply_markup=markup)
    else:
        bot.send_message(message.chat.id, '–û—à–∏–±–∫–∞.')

def get_weather_data(city):
    try:
        tempspisok = []
        vlazhspisok = []
        windspisok = []
        osadkispisok = []
        oblspisok = []

        response = requests.get(f'https://api.openweathermap.org/data/2.5/forecast?q={city}&appid={API}&units=metric&lang=ru')
        data = response.json()

        for i in range (0,8):
            prognoz = data['list'][i]
            temp = prognoz['main']['temp']
            tempspisok.append(temp)
            vlazh = prognoz['main']['humidity']
            vlazhspisok.append(vlazh)
            wind = prognoz['wind']['speed']
            windspisok.append(wind)
            osadki = prognoz['pop']
            osadkispisok.append(osadki)
            obl = prognoz['clouds']['all']
            oblspisok.append(obl)




        srtemp = sum(tempspisok)/len(tempspisok)
        srvlazh =  sum(vlazhspisok)/len(vlazhspisok)
        srwind = sum(windspisok)/len(windspisok)
        maxosadki = max(osadkispisok) * 100
        srobl = sum(oblspisok)/len(oblspisok)
        if srobl < 20:
            obltrue = '—è—Å–Ω–æ/–º–∞–ª–æ–æ–±–ª–∞—á–Ω–æ ‚òÄÔ∏è'
        elif  20 <= srobl < 60:
            obltrue = '–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å ‚õÖ'
        elif 60 <= srobl < 90:
            obltrue = '–æ–±–ª–∞—á–Ω–æ ‚òÅÔ∏è'
        elif 90 <= srobl <= 100:
            obltrue ='–ø–∞—Å–º—É—Ä–Ω–æ üå´Ô∏è'

        return f'–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞üå°Ô∏è: {srtemp:.1f}¬∞C. \n–í–ª–∞–∂–Ω–æ—Å—Ç—åüíß: {srvlazh:.1f}%. \n–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞üèçÔ∏èÔ∏è: {srwind:.1f} –º/c. \n–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Å–∞–¥–∫–æ–≤üåßÔ∏è: {maxosadki:.1f}%.\n–û–±–ª–∞—á–Ω–æ—Å—Ç—å: {obltrue}\n \n//–í–∑—è—Ç—ã —Å—Ä–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –∑–∞ 24 —á–∞—Å–∞.\n//–î–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –¥–ª—è:{city}.'
    except:
        None

@bot.callback_query_handler(func=lambda call: call.data.startswith('update_'))

def callback(call):
    if call.data.startswith('update_'):
        user_id = int(call.data.split('_')[1])
        city = user_city.get(user_id)

        if city == None:
            bot.answer_callback_query(call.id,'–û—à–∏–±–∫–∞.')
            return

        weather_text = get_weather_data(city)
        if weather_text:
            markup = types.InlineKeyboardMarkup(row_width=1)
            btn1 = types.InlineKeyboardButton('–û–±–Ω–æ–≤–∏—Ç—å', callback_data=f'update_{user_id}')
            markup.add(btn1)


            try:
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.id, text=weather_text, reply_markup=markup)
                bot.answer_callback_query(call.id, '–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã')
            except:
                None
        else:
            None

@bot.message_handler(commands=['whatowear'])

def whattowear(message):
    user_id = message.from_user.id
    city = user_city.get(user_id)
    tempspisok = []
    if city == None:
        bot.send_message(message.chat.id, '–û—à–∏–±–∫–∞.')
    else:
        response = requests.get(f'https://api.openweathermap.org/data/2.5/forecast?q={city}&appid={API}&units=metric&lang=ru')
        data = response.json()
        for i in range (0,4):
            prognoz = data['list'][i]
            temp = prognoz['main']['temp']
            tempspisok.append(temp)
        srtemp = (int(tempspisok[0])+int(tempspisok[1])+int(tempspisok[2])+int(tempspisok[3]))/4
        bot.send_message(message.chat.id, f'–°—Ä–µ–¥–Ω—è—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—èüå°Ô∏è:{srtemp}¬∞C')
        if srtemp > 20:
            bot.send_message(message.chat.id, '‚òÄÔ∏è–û–¥–µ–∂–¥–∞:–§—É—Ç–±–æ–ª–∫–∞/–º–∞–π–∫–∞, —à–æ—Ä—Ç—ã/—é–±–∫–∞/–ª–µ–≥–∫–∏–µ –±—Ä—é–∫–∏.\n–û–±—É–≤—å:–°–∞–Ω–¥–∞–ª–∏–∏,–∫–µ–¥—ã.\n–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:–ì–æ–ª–æ–≤–Ω–æ–π —É–±–æ—Ä.')
        elif 20 >= srtemp > 10:
            bot.send_message(message.chat.id,'üå•Ô∏è–û–¥–µ–∂–¥–∞:–õ–µ–≥–∫–∞—è –∫—É—Ä—Ç–∫–∞/–≤–µ—Ç—Ä–æ–≤–∫–∞, –¥–∂–∏–Ω—Å—ã/–±—Ä—é–∫–∏, –ª–æ–Ω–≥—Å–ª–∏–≤/–∫–æ—Ñ—Ç–∞. \n–û–±—É–≤—å:–ö—Ä–æ—Å—Å–æ–≤–∫–∏, –∫–µ–¥—ã.\n')
        elif 10 >= srtemp >= 0:
            bot.send_message(message.chat.id,'‚òî–û–¥–µ–∂–¥–∞:–¢–µ–ø–ª–∞—è –∫—É—Ä—Ç–∫–∞, –¥–∂–∏–Ω—Å—ã/–ø–ª–æ—Ç–Ω—ã–µ –±—Ä—é–∫–∏, —Å–≤–∏—Ç–µ—Ä/—Ç–æ–ª—Å—Ç–æ–≤–∫–∞.\n–û–±—É–≤—å:–ó–∞–∫—Ä—ã—Ç–∞—è –æ–±—É–≤—å –Ω–∞ –ø–ª–æ—Ç–Ω–æ–π –ø–æ–¥–æ—à–≤–µ/–æ—Å–µ–Ω–Ω–∏–µ –±–æ—Ç–∏–Ω–∫–∏.\n–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã: –õ–µ–≥–∫–∞—è —à–∞–ø–∫–∞, —à–∞—Ä—Ñ, –ø–µ—Ä—á–∞—Ç–∫–∏.')
        elif srtemp < 0:
            bot.send_message(message.chat.id,'‚òÉÔ∏è–û–¥–µ–∂–¥–∞:–ó–∏–º–Ω—è—è –∫—É—Ä—Ç–∫–∞, —É—Ç–µ–ø–ª–µ–Ω–Ω—ã–µ –±—Ä—é–∫–∏, —Å–≤–∏—Ç–µ—Ä, —Ç–µ—Ä–º–æ–±–µ–ª—å–µ.\n–û–±—É–≤—å:–ó–∏–º–Ω–∏–µ –±–æ—Ç–∏–Ω–∫–∏/—Å–∞–ø–æ–≥–∏.\n–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã:–¢–µ–ø–ª–∞—è —à–∞–ø–∫–∞, —à–∞—Ä—Ñ, –≤–∞—Ä–µ–∂–∫–∏/–ø–µ—Ä—á–∞—Ç–∫–∏.')

@bot.message_handler(commands=['next5days'])

def neosnova(message):
    user_id = message.from_user.id
    city = user_city.get(user_id)
    if city == None:
        bot.send_message(message.chat.id, '–û—à–∏–±–∫–∞.')
        return



    markup = types.InlineKeyboardMarkup(row_width=1)
    btn1= types.InlineKeyboardButton('–û–±–Ω–æ–≤–∏—Ç—å', callback_data=f'update5_{user_id}')
    markup.add(btn1)

    weather_text = next5days(city)
    if weather_text:
        bot.send_message(message.chat.id, weather_text, reply_markup=markup)
    else:
        bot.send_message(message.chat.id, '–û—à–∏–±–∫–∞.')

def next5days(city):
    try:
        response = requests.get(f'https://api.openweathermap.org/data/2.5/forecast?q={city}&appid={API}&units=metric&lang=ru')
        data = response.json()
        tempspisok = []
        oblspisok = []
        osadkispisok = []
        for i in range (0,40):
            prognoz = data['list'][i]
            temp = prognoz['main']['temp']
            tempspisok.append(temp)
            obl = prognoz['clouds']['all']
            oblspisok.append(obl)
            osadki = prognoz['pop']
            osadkispisok.append(osadki)
        tempspisok1 = tempspisok[:8]
        tempspisok2 = tempspisok[8:17]
        tempspisok3 = tempspisok[17:25]
        tempspisok4 = tempspisok[25:33]
        tempspisok5 = tempspisok[33:]
        oblspisok1 = oblspisok[:8]
        oblspisok2 = oblspisok[8:17]
        oblspisok3 = oblspisok[17:25]
        oblspisok4 = oblspisok[25:33]
        oblspisok5 = oblspisok[33:]
        osadkispisok1 = osadkispisok[:8]
        osadkispisok2 = osadkispisok[8:17]
        osadkispisok3 = osadkispisok[17:25]
        osadkispisok4 = osadkispisok[25:33]
        osadkispisok5 = osadkispisok[33:]
        temp1 = sum(tempspisok1)/len(tempspisok1)
        temp2 = sum(tempspisok2) / len(tempspisok2)
        temp3 = sum(tempspisok3) / len(tempspisok3)
        temp4 = sum(tempspisok4) / len(tempspisok4)
        temp5 = sum(tempspisok5) / len(tempspisok5)
        obl1 = sum(oblspisok1) / len(oblspisok1)
        obl2 = sum(oblspisok2) / len(oblspisok2)
        obl3 = sum(oblspisok3) / len(oblspisok3)
        obl4 = sum(oblspisok4) / len(oblspisok4)
        obl5 = sum(oblspisok5) / len(oblspisok5)
        osadki1 = max(osadkispisok1)*100
        osadki2 = max(osadkispisok2)*100
        osadki3 = max(osadkispisok3)*100
        osadki4 = max(osadkispisok4)*100
        osadki5 = max(osadkispisok5)*100
        def cloudiness(cld):
            if cld < 20:
                return '—è—Å–Ω–æ/–º–∞–ª–æ–æ–±–ª–∞—á–Ω–æ ‚òÄÔ∏è'
            elif 20 <= cld < 60:
                return '–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å ‚õÖ'
            elif 60 <= cld < 90:
                return '–æ–±–ª–∞—á–Ω–æ ‚òÅÔ∏è'
            elif 90 <= cld <= 100:
                return  '–ø–∞—Å–º—É—Ä–Ω–æ üå´Ô∏è'

        return f'1 –î–µ–Ω—å(—Å–µ–≥–æ–¥–Ω—è):üå°Ô∏è{round(temp1,1)}¬∞C. –û–±–ª–∞—á–Ω–æ—Å—Ç—å:{cloudiness(obl1)}. –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Å–∞–¥–∫–æ–≤:üåßÔ∏è{osadki1}%.\n\n2 –î–µ–Ω—å(–∑–∞–≤—Ç—Ä–∞):üå°Ô∏è{round(temp2,1)}¬∞C. –û–±–ª–∞—á–Ω–æ—Å—Ç—å:{cloudiness(obl2)}. –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Å–∞–¥–∫–æ–≤:üåßÔ∏è{osadki2}%.\n\n3 –î–µ–Ω—å:üå°Ô∏è{round(temp3,1)}¬∞C. –û–±–ª–∞—á–Ω–æ—Å—Ç—å:{cloudiness(obl3)}. –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Å–∞–¥–∫–æ–≤:üåßÔ∏è{osadki3}%.\n\n4 –î–µ–Ω—å:üå°Ô∏è{round(temp4,1)}¬∞C. –û–±–ª–∞—á–Ω–æ—Å—Ç—å:{cloudiness(obl4)}. –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Å–∞–¥–∫–æ–≤:üåßÔ∏è{osadki4}%.\n\n5 –î–µ–Ω—å:üå°Ô∏è{round(temp5,1)}¬∞C. –û–±–ª–∞—á–Ω–æ—Å—Ç—å:{cloudiness(obl5)}. –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Å–∞–¥–∫–æ–≤:üåßÔ∏è{osadki5}%.\n\n//–î–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –¥–ª—è:{city}.'









    except:
        None

@bot.callback_query_handler(func=lambda call: call.data.startswith('update5_'))

def callback5(call):
    if call.data.startswith('update5_'):
        user_id = int(call.data.split('_')[1])
        city = user_city.get(user_id)

        if city == None:
            bot.answer_callback_query(call.id,'–û—à–∏–±–∫–∞.')
            return

        weather_text = next5days(city)
        if weather_text:
            markup = types.InlineKeyboardMarkup(row_width=1)
            btn1 = types.InlineKeyboardButton('–û–±–Ω–æ–≤–∏—Ç—å', callback_data=f'update5_{user_id}')
            markup.add(btn1)


            try:
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.id, text=weather_text, reply_markup=markup)
                bot.answer_callback_query(call.id, '–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã')
            except:
                None
        else:
            None

@bot.message_handler(commands=['whatodo'])

def whatodo(message):

    user_id = message.from_user.id
    city = user_city.get(user_id)

    if city == None:
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞.')

    else:
        tempspisok = []
        osadkispisok = []

        response = requests.get(f'https://api.openweathermap.org/data/2.5/forecast?q={city}&appid={API}&units=metric&lang=ru')
        data = response.json()
        for i in range(0, 3):
            prognoz = data['list'][i]
            tempspisok.append(prognoz['main']['temp'])
            osadkispisok.append(prognoz['pop'])
        tempp = sum(tempspisok)/len(tempspisok)
        if max(osadkispisok) > 0.65:
            bot.send_message(message.chat.id, f'–í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –±—É–¥—É—Ç –æ—Å–∞–¥–∫–∏, –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å:{max(osadkispisok)*100}. –õ—É—á—à–µ –æ—Å—Ç–∞—Ç—å—Å—è –¥–æ–º–∞‚òï.')
        else:
            if tempp > 20:
                bot.send_message(message.chat.id, '–ò–¥–µ–∞–ª—å–Ω–∞—è –ø–æ–≥–æ–¥–∞! üö¥‚Äç‚ôÄÔ∏è –°–∞–º–æ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–∏–∫–Ω–∏–∫–∞, –≤–µ–ª–æ–ø—Ä–æ–≥—É–ª–∫–∏ –∏ —Å–æ–ª–Ω–µ—á–Ω—ã—Ö –≤–∞–Ω–Ω. –ù–µ –∑–∞–±—É–¥—å—Ç–µ —Å–æ–ª–Ω—Ü–µ–∑–∞—â–∏—Ç–Ω—ã–π –∫—Ä–µ–º! ‚òÄÔ∏èüß¥')
            elif 20 >= tempp > 10:
                bot.send_message(message.chat.id,'–û—Ç–ª–∏—á–Ω–∞—è –ø–æ–≥–æ–¥–∞ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏! üèÉ‚Äç‚ôÇÔ∏è –ë–µ—Ä–∏—Ç–µ –≤–µ–ª–æ—Å–∏–ø–µ–¥ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ—Å—å –Ω–∞ –ø—Ä–æ–±–µ–∂–∫—É. –ò–¥–µ–∞–ª—å–Ω–æ –∏ –¥–ª—è –ø–æ—Å–∏–¥–µ–ª–æ–∫ –≤ —É–ª–∏—á–Ω–æ–º –∫–∞—Ñ–µ! ‚òï')
            elif 10 >= tempp > 0:
                bot.send_message(message.chat.id,'–°–≤–µ–∂–æ, –Ω–æ –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ! üö∂‚Äç‚ôÄÔ∏è –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ—Å—å –Ω–∞ –ø—Ä–æ–≥—É–ª–∫—É, –∑–∞–π–º–∏—Ç–µ—Å—å —Å–∫–∞–Ω–¥–∏–Ω–∞–≤—Å–∫–æ–π —Ö–æ–¥—å–±–æ–π –∏–ª–∏ —Å–æ–≥—Ä–µ–π—Ç–µ—Å—å —á–∞–µ–º –∏–∑ —Ç–µ—Ä–º–æ—Å–∞ –≤ –ø–∞—Ä–∫–µ. üß£')
            elif 0 >= tempp > -10:
                bot.send_message(message.chat.id,'–ò–¥–µ–∞–ª—å–Ω–∞—è –ø–æ–≥–æ–¥–∞ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ—Ç–¥—ã—Ö–∞! ‚ùÑÔ∏è –°–∞–º–æ–µ –≤—Ä–µ–º—è –∫–∞—Ç–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—å–∫–∞—Ö, –ª–µ–ø–∏—Ç—å —Å–Ω–µ–≥–æ–≤–∏–∫–∞ –∏ –≥—É–ª—è—Ç—å –ø–æ —Ö—Ä—É—Å—Ç—è—â–µ–º—É —Å–Ω–µ–≥—É.')
            elif 20 >= tempp > 10:
                bot.send_message(message.chat.id,'–°—É—Ä–æ–≤—ã–π –º–æ—Ä–æ–∑! ‚ö†Ô∏è –ë—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã, –æ–¥–µ–≤–∞–π—Ç–µ—Å—å –æ—á–µ–Ω—å —Ç–µ–ø–ª–æ. –ü—Ä–æ–≥—É–ª–∫–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∫–æ—Ä–æ—Ç–∫–∏–º–∏. –õ—É—á—à–∏–π –ø–ª–∞–Ω ‚Äî —É—é—Ç –¥–æ–º–∞ —Å –≥–æ—Ä—è—á–∏–º –∫–∞–∫–∞–æ –∏ –∫–Ω–∏–≥–æ–π. üè†üìö')

@bot.message_handler(content_types=['text'])

def get_smth(message):
    user_id = message.from_user.id
    citycheck = message.text.strip().lower()

    response = requests.get(f'https://api.openweathermap.org/data/2.5/forecast?q={citycheck}&appid={API}&units=metric&lang=ru')
    if response.status_code == 200:
        user_city[user_id] = citycheck

        bot.send_message(message.chat.id, '–ì–æ—Ä–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.')





    else:
        bot.send_message(message.chat.id,'–ù–µ–≤–µ—Ä–Ω–æ –≤–≤–µ–¥–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞ –∂–∏—Ç–µ–ª—å—Å—Ç–≤–∞.')

bot.polling(none_stop=True)

# wwsemyonmakushin